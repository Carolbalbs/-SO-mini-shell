{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documenta\u00e7\u00e3o do Projeto Mini Shell Introdu\u00e7\u00e3o Este documento fornece uma an\u00e1lise detalhada dos arquivos de c\u00f3digo-fonte C que comp\u00f5em um projeto de shell b\u00e1sico. O projeto \u00e9 dividido em m\u00f3dulos, cada um com responsabilidades espec\u00edficas: index.h : Arquivo de cabe\u00e7alho que cont\u00e9m defini\u00e7\u00f5es globais, macros e prot\u00f3tipos de fun\u00e7\u00f5es. utils.c : Implementa fun\u00e7\u00f5es utilit\u00e1rias e wrappers para chamadas de sistema. builtin.c : Cont\u00e9m a implementa\u00e7\u00e3o de comandos built-in do shell. index.c : A l\u00f3gica principal do shell, incluindo o loop de leitura, avalia\u00e7\u00e3o e execu\u00e7\u00e3o de comandos (REPL). O objetivo desta documenta\u00e7\u00e3o \u00e9 descrever a funcionalidade de cada arquivo, as fun\u00e7\u00f5es que eles cont\u00eam e como interagem para formar o shell completo. (Content truncated due to size limit. Use line ranges to read in chunks)","title":"Introdu\u00e7\u00e3o"},{"location":"#documentacao-do-projeto-mini-shell","text":"","title":"Documenta\u00e7\u00e3o do Projeto Mini Shell"},{"location":"#introducao","text":"Este documento fornece uma an\u00e1lise detalhada dos arquivos de c\u00f3digo-fonte C que comp\u00f5em um projeto de shell b\u00e1sico. O projeto \u00e9 dividido em m\u00f3dulos, cada um com responsabilidades espec\u00edficas: index.h : Arquivo de cabe\u00e7alho que cont\u00e9m defini\u00e7\u00f5es globais, macros e prot\u00f3tipos de fun\u00e7\u00f5es. utils.c : Implementa fun\u00e7\u00f5es utilit\u00e1rias e wrappers para chamadas de sistema. builtin.c : Cont\u00e9m a implementa\u00e7\u00e3o de comandos built-in do shell. index.c : A l\u00f3gica principal do shell, incluindo o loop de leitura, avalia\u00e7\u00e3o e execu\u00e7\u00e3o de comandos (REPL). O objetivo desta documenta\u00e7\u00e3o \u00e9 descrever a funcionalidade de cada arquivo, as fun\u00e7\u00f5es que eles cont\u00eam e como interagem para formar o shell completo.","title":"Introdu\u00e7\u00e3o"},{"location":"#_1","text":"(Content truncated due to size limit. Use line ranges to read in chunks)","title":""},{"location":"builtin/","text":"Implementa\u00e7\u00e3o de Comandos Built-in builtin.c O arquivo builtin.c \u00e9 respons\u00e1vel por implementar os comandos built-in do shell. Comandos built-in s\u00e3o fun\u00e7\u00f5es que s\u00e3o executadas diretamente pelo shell, em vez de serem programas externos. Isso os torna mais r\u00e1pidos e eficientes, pois n\u00e3o exigem a cria\u00e7\u00e3o de um novo processo. Atualmente, este arquivo cont\u00e9m as implementa\u00e7\u00f5es para os comandos exit e env . int index_exit(char **args) Prop\u00f3sito : Implementa o comando exit , que encerra a execu\u00e7\u00e3o do shell. Argumentos : char **args - um array de strings contendo os argumentos passados para o comando exit . Embora o prot\u00f3tipo aceite argumentos, a implementa\u00e7\u00e3o atual n\u00e3o os utiliza ( (void)args; ). Funcionalidade : Antes de sair, a fun\u00e7\u00e3o chama spinnerLoading() , que exibe uma anima\u00e7\u00e3o de desligamento, proporcionando uma experi\u00eancia de usu\u00e1rio mais agrad\u00e1vel. Ap\u00f3s a anima\u00e7\u00e3o, o shell \u00e9 encerrado com exit(EXIT_SUCCESS) , indicando uma sa\u00edda bem-sucedida. Retorno : N\u00e3o retorna, pois a fun\u00e7\u00e3o exit() encerra o processo. int index_env(char **args) Prop\u00f3sito : Implementa o comando env , que exibe as vari\u00e1veis de ambiente do processo atual. Argumentos : char **args - um array de strings contendo os argumentos passados para o comando env . A implementa\u00e7\u00e3o atual n\u00e3o os utiliza ( (void)args; ). Funcionalidade : A fun\u00e7\u00e3o acessa a vari\u00e1vel global environ (declarada como extern char **environ; ), que \u00e9 um ponteiro para um array de strings, onde cada string representa uma vari\u00e1vel de ambiente no formato NOME=VALOR . A fun\u00e7\u00e3o itera sobre este array e imprime cada vari\u00e1vel de ambiente em uma nova linha usando a macro p (que envolve printf ). Comportamento em Erro : Se environ for nulo (o que \u00e9 improv\u00e1vel em um ambiente POSIX t\u00edpico, mas \u00e9 uma verifica\u00e7\u00e3o de seguran\u00e7a), a fun\u00e7\u00e3o retorna 1 , indicando um erro. Caso contr\u00e1rio, retorna 0 para sucesso. Retorno : Retorna 0 em caso de sucesso e 1 em caso de falha. int cell_echo(char **args) Prop\u00f3sito : Implementa o comando echo , que imprime os argumentos fornecidos na sa\u00edda padr\u00e3o. Suporta a op\u00e7\u00e3o -n para suprimir a nova linha final. Argumentos : char **args - um array de strings contendo os argumentos para o comando echo . Funcionalidade : A fun\u00e7\u00e3o verifica se o segundo argumento ( args[1] ) \u00e9 \"-n\" . Se for, a flag newline \u00e9 definida como false e o \u00edndice de in\u00edcio para a impress\u00e3o dos argumentos \u00e9 ajustado para 2 (pulando echo e -n ). Caso contr\u00e1rio, a impress\u00e3o come\u00e7a do \u00edndice 1 . A fun\u00e7\u00e3o ent\u00e3o itera sobre os argumentos restantes, imprimindo cada um. Um espa\u00e7o \u00e9 adicionado entre os argumentos. Finalmente, se a flag newline for true , uma nova linha \u00e9 impressa. Comportamento em Erro : Se args for nulo ou args[0] for nulo, a fun\u00e7\u00e3o retorna 1 , indicando um erro. Retorno : Retorna 0 em caso de sucesso e 1 em caso de falha. Este arquivo centraliza a l\u00f3gica para comandos que s\u00e3o parte integrante do shell, garantindo que eles sejam executados de forma eficiente e com o comportamento esperado.","title":"builtin.c"},{"location":"builtin/#implementacao-de-comandos-built-in","text":"","title":"Implementa\u00e7\u00e3o de Comandos Built-in"},{"location":"builtin/#builtinc","text":"O arquivo builtin.c \u00e9 respons\u00e1vel por implementar os comandos built-in do shell. Comandos built-in s\u00e3o fun\u00e7\u00f5es que s\u00e3o executadas diretamente pelo shell, em vez de serem programas externos. Isso os torna mais r\u00e1pidos e eficientes, pois n\u00e3o exigem a cria\u00e7\u00e3o de um novo processo. Atualmente, este arquivo cont\u00e9m as implementa\u00e7\u00f5es para os comandos exit e env .","title":"builtin.c"},{"location":"builtin/#int-index_exitchar-args","text":"Prop\u00f3sito : Implementa o comando exit , que encerra a execu\u00e7\u00e3o do shell. Argumentos : char **args - um array de strings contendo os argumentos passados para o comando exit . Embora o prot\u00f3tipo aceite argumentos, a implementa\u00e7\u00e3o atual n\u00e3o os utiliza ( (void)args; ). Funcionalidade : Antes de sair, a fun\u00e7\u00e3o chama spinnerLoading() , que exibe uma anima\u00e7\u00e3o de desligamento, proporcionando uma experi\u00eancia de usu\u00e1rio mais agrad\u00e1vel. Ap\u00f3s a anima\u00e7\u00e3o, o shell \u00e9 encerrado com exit(EXIT_SUCCESS) , indicando uma sa\u00edda bem-sucedida. Retorno : N\u00e3o retorna, pois a fun\u00e7\u00e3o exit() encerra o processo.","title":"int index_exit(char **args)"},{"location":"builtin/#int-index_envchar-args","text":"Prop\u00f3sito : Implementa o comando env , que exibe as vari\u00e1veis de ambiente do processo atual. Argumentos : char **args - um array de strings contendo os argumentos passados para o comando env . A implementa\u00e7\u00e3o atual n\u00e3o os utiliza ( (void)args; ). Funcionalidade : A fun\u00e7\u00e3o acessa a vari\u00e1vel global environ (declarada como extern char **environ; ), que \u00e9 um ponteiro para um array de strings, onde cada string representa uma vari\u00e1vel de ambiente no formato NOME=VALOR . A fun\u00e7\u00e3o itera sobre este array e imprime cada vari\u00e1vel de ambiente em uma nova linha usando a macro p (que envolve printf ). Comportamento em Erro : Se environ for nulo (o que \u00e9 improv\u00e1vel em um ambiente POSIX t\u00edpico, mas \u00e9 uma verifica\u00e7\u00e3o de seguran\u00e7a), a fun\u00e7\u00e3o retorna 1 , indicando um erro. Caso contr\u00e1rio, retorna 0 para sucesso. Retorno : Retorna 0 em caso de sucesso e 1 em caso de falha.","title":"int index_env(char **args)"},{"location":"builtin/#int-cell_echochar-args","text":"Prop\u00f3sito : Implementa o comando echo , que imprime os argumentos fornecidos na sa\u00edda padr\u00e3o. Suporta a op\u00e7\u00e3o -n para suprimir a nova linha final. Argumentos : char **args - um array de strings contendo os argumentos para o comando echo . Funcionalidade : A fun\u00e7\u00e3o verifica se o segundo argumento ( args[1] ) \u00e9 \"-n\" . Se for, a flag newline \u00e9 definida como false e o \u00edndice de in\u00edcio para a impress\u00e3o dos argumentos \u00e9 ajustado para 2 (pulando echo e -n ). Caso contr\u00e1rio, a impress\u00e3o come\u00e7a do \u00edndice 1 . A fun\u00e7\u00e3o ent\u00e3o itera sobre os argumentos restantes, imprimindo cada um. Um espa\u00e7o \u00e9 adicionado entre os argumentos. Finalmente, se a flag newline for true , uma nova linha \u00e9 impressa. Comportamento em Erro : Se args for nulo ou args[0] for nulo, a fun\u00e7\u00e3o retorna 1 , indicando um erro. Retorno : Retorna 0 em caso de sucesso e 1 em caso de falha. Este arquivo centraliza a l\u00f3gica para comandos que s\u00e3o parte integrante do shell, garantindo que eles sejam executados de forma eficiente e com o comportamento esperado.","title":"int cell_echo(char **args)"},{"location":"indexH/","text":"L\u00f3gica Principal do Shell (REPL) index.c O arquivo index.c cont\u00e9m a l\u00f3gica central do shell, implementando o ciclo REPL (Read-Evaluate-Print/Execute-Loop). Este ciclo \u00e9 o cora\u00e7\u00e3o de qualquer shell interativo, onde o programa l\u00ea a entrada do usu\u00e1rio, a processa, executa o comando correspondente e repete o processo. Al\u00e9m do REPL, index.c gerencia a execu\u00e7\u00e3o de comandos built-in e externos, bem como a divis\u00e3o da linha de comando em argumentos. Vari\u00e1veis Globais int status = 0; : Prop\u00f3sito : Esta vari\u00e1vel global armazena o status de sa\u00edda do \u00faltimo comando executado. \u00c9 um padr\u00e3o comum em shells para que o status de sa\u00edda possa ser consultado por comandos subsequentes ou scripts.","title":"index.h"},{"location":"indexH/#logica-principal-do-shell-repl","text":"","title":"L\u00f3gica Principal do Shell (REPL)"},{"location":"indexH/#indexc","text":"O arquivo index.c cont\u00e9m a l\u00f3gica central do shell, implementando o ciclo REPL (Read-Evaluate-Print/Execute-Loop). Este ciclo \u00e9 o cora\u00e7\u00e3o de qualquer shell interativo, onde o programa l\u00ea a entrada do usu\u00e1rio, a processa, executa o comando correspondente e repete o processo. Al\u00e9m do REPL, index.c gerencia a execu\u00e7\u00e3o de comandos built-in e externos, bem como a divis\u00e3o da linha de comando em argumentos.","title":"index.c"},{"location":"indexH/#variaveis-globais","text":"int status = 0; : Prop\u00f3sito : Esta vari\u00e1vel global armazena o status de sa\u00edda do \u00faltimo comando executado. \u00c9 um padr\u00e3o comum em shells para que o status de sa\u00edda possa ser consultado por comandos subsequentes ou scripts.","title":"Vari\u00e1veis Globais"},{"location":"utils/","text":"Fun\u00e7\u00f5es Utilit\u00e1rias e Wrappers de Chamadas de Sistema utils.c O arquivo utils.c cont\u00e9m uma cole\u00e7\u00e3o de fun\u00e7\u00f5es utilit\u00e1rias e wrappers para chamadas de sistema POSIX. Essas fun\u00e7\u00f5es s\u00e3o projetadas para encapsular a l\u00f3gica de tratamento de erros das chamadas de sistema subjacentes, tornando o c\u00f3digo principal do shell mais limpo e robusto. Em caso de falha, a maioria dessas fun\u00e7\u00f5es imprime uma mensagem de erro usando perror e encerra o programa, garantindo que o shell n\u00e3o continue a operar em um estado inconsistente. Wrappers para Gerenciamento de Processos As fun\u00e7\u00f5es de gerenciamento de processos em utils.c fornecem uma interface segura para opera\u00e7\u00f5es comuns de processos, como cria\u00e7\u00e3o, execu\u00e7\u00e3o e espera: pid_t Fork(void) : Prop\u00f3sito : Este \u00e9 um wrapper para a chamada de sistema fork() . Ele cria um novo processo filho que \u00e9 uma c\u00f3pia exata do processo pai. Comportamento em Erro : Se fork() falhar (retornar um valor negativo), a fun\u00e7\u00e3o imprime uma mensagem de erro ( \"Fork Failed\" ) usando perror e encerra o programa com exit(EX_OSERR) . Isso garante que o shell n\u00e3o tente operar com um processo filho que n\u00e3o foi criado corretamente. Retorno : Retorna o ID do processo filho ( pid_t ) para o processo pai e 0 para o processo filho, conforme o comportamento padr\u00e3o de fork() . void Execvp(const char *file, char *const argv[]) : Prop\u00f3sito : Este wrapper para execvp() substitui a imagem do processo atual por um novo programa. Ele procura o execut\u00e1vel especificado por file nos diret\u00f3rios listados na vari\u00e1vel de ambiente PATH . Comportamento em Erro : Antes de chamar execvp() , a fun\u00e7\u00e3o verifica se file ou argv s\u00e3o nulos. Se forem, imprime uma mensagem de erro no stderr e encerra com exit(EXIT_FAILURE) . Se execvp() falhar (retornar -1 ), imprime uma mensagem de erro ( \"Failed\" ) usando perror e encerra o programa com exit(EX_UNAVAILABLE) . Isso \u00e9 crucial porque execvp() s\u00f3 retorna em caso de erro; um retorno bem-sucedido significa que o novo programa est\u00e1 em execu\u00e7\u00e3o. Argumentos : file \u00e9 o nome do programa a ser executado, e argv \u00e9 um array de strings que representa os argumentos da linha de comando para o novo programa, onde argv[0] \u00e9 o nome do programa. pid_t Wait(int *status) : Prop\u00f3sito : Este wrapper para wait() suspende a execu\u00e7\u00e3o do processo pai at\u00e9 que um de seus processos filhos termine. Ele \u00e9 usado para coletar o status de sa\u00edda de processos filhos e evitar processos zumbis. Comportamento em Erro : A fun\u00e7\u00e3o primeiro verifica se o ponteiro status \u00e9 nulo. Se for, imprime uma mensagem de erro ( \"Wait: status argument required\" ) e retorna -1 . Se wait() falhar (retornar -1 ), imprime uma mensagem de erro ( \"Wait failed\" ) usando perror . Ap\u00f3s a conclus\u00e3o bem-sucedida de wait() , se o processo filho terminou normalmente ( WIFEXITED(*status) ), o status de sa\u00edda real do filho ( WEXITSTATUS(*status) ) \u00e9 armazenado em *status . Retorno : Retorna o ID do processo filho que terminou ou -1 em caso de erro. Wrappers para Gerenciamento de Mem\u00f3ria As fun\u00e7\u00f5es de gerenciamento de mem\u00f3ria em utils.c fornecem aloca\u00e7\u00e3o e realoca\u00e7\u00e3o de mem\u00f3ria seguras, com tratamento de erros integrado: void *Malloc(size_t size) : Prop\u00f3sito : Este wrapper para malloc() aloca um bloco de mem\u00f3ria do tamanho especificado. Comportamento em Erro : Se malloc() falhar (retornar NULL ), a fun\u00e7\u00e3o imprime uma mensagem de erro ( \"Malloc Failed\" ) usando perror e encerra o programa com exit(EXIT_FAILURE) . Um caso especial \u00e9 quando size \u00e9 0 , para o qual Malloc retorna NULL sem erro, seguindo o comportamento comum de malloc para aloca\u00e7\u00f5es de tamanho zero. Retorno : Retorna um ponteiro para o bloco de mem\u00f3ria alocado ou NULL se size for 0 . void *Realloc(void *ptr, size_t size) : Prop\u00f3sito : Este wrapper para realloc() redimensiona o bloco de mem\u00f3ria apontado por ptr para o novo size . Comportamento em Erro : Se realloc() falhar (retornar NULL ) e o size n\u00e3o for 0 , a fun\u00e7\u00e3o imprime uma mensagem de erro ( \"Realloc Failed\" ) usando perror e encerra o programa com exit(EXIT_FAILURE) . Se size for 0 , realloc se comporta como free(ptr) , e a fun\u00e7\u00e3o retorna NULL sem erro, o que \u00e9 um comportamento v\u00e1lido. Retorno : Retorna um ponteiro para o bloco de mem\u00f3ria redimensionado ou NULL se a realoca\u00e7\u00e3o falhar ou se size for 0 . Wrappers para Opera\u00e7\u00f5es de Diret\u00f3rio utils.c inclui um wrapper para obter o diret\u00f3rio de trabalho atual: void Getcwd(char *buf, size_t size) : Prop\u00f3sito : Este wrapper para getcwd() copia o caminho absoluto do diret\u00f3rio de trabalho atual para o buffer buf . Comportamento em Erro : Se getcwd() falhar (retornar NULL ), a fun\u00e7\u00e3o imprime uma mensagem de erro ( \"getcwd FAILED\" ) usando perror . Argumentos : buf \u00e9 o buffer onde o caminho ser\u00e1 armazenado, e size \u00e9 o tamanho m\u00e1ximo do buffer. Fun\u00e7\u00f5es de Interface do Usu\u00e1rio Al\u00e9m dos wrappers, utils.c tamb\u00e9m cont\u00e9m fun\u00e7\u00f5es para melhorar a experi\u00eancia do usu\u00e1rio com elementos visuais: void printbanner(void) : Prop\u00f3sito : Imprime um banner ASCII art no console. Este banner \u00e9 exibido no in\u00edcio do shell, fornecendo uma sauda\u00e7\u00e3o visual. Implementa\u00e7\u00e3o : Utiliza a macro p (que envolve printf ) e c\u00f3digos de cores ANSI (definidos em index.h ) para exibir o banner com formata\u00e7\u00e3o colorida. void spinnerLoading() : Prop\u00f3sito : Exibe uma anima\u00e7\u00e3o de \"carregamento\" ou \"desligamento\" no console, simulando um processo em andamento antes de o shell ser encerrado. Implementa\u00e7\u00e3o : A fun\u00e7\u00e3o usa um array de strings ( charging[] ) para representar os diferentes quadros da anima\u00e7\u00e3o de um spinner. Ela itera sobre esses quadros, imprimindo cada um com um atraso ( usleep ) e for\u00e7ando a atualiza\u00e7\u00e3o do console ( fflush(stdout) ). No final da anima\u00e7\u00e3o, imprime uma mensagem de sa\u00edda e encerra o programa com exit(X_OK) (onde X_OK \u00e9 uma constante definida em index.h como EX_OK ). Em resumo, utils.c \u00e9 um componente vital do shell, fornecendo uma camada de abstra\u00e7\u00e3o e tratamento de erros para opera\u00e7\u00f5es de baixo n\u00edvel, o que contribui significativamente para a robustez e a confiabilidade do sistema.","title":"utils.c"},{"location":"utils/#funcoes-utilitarias-e-wrappers-de-chamadas-de-sistema","text":"","title":"Fun\u00e7\u00f5es Utilit\u00e1rias e Wrappers de Chamadas de Sistema"},{"location":"utils/#utilsc","text":"O arquivo utils.c cont\u00e9m uma cole\u00e7\u00e3o de fun\u00e7\u00f5es utilit\u00e1rias e wrappers para chamadas de sistema POSIX. Essas fun\u00e7\u00f5es s\u00e3o projetadas para encapsular a l\u00f3gica de tratamento de erros das chamadas de sistema subjacentes, tornando o c\u00f3digo principal do shell mais limpo e robusto. Em caso de falha, a maioria dessas fun\u00e7\u00f5es imprime uma mensagem de erro usando perror e encerra o programa, garantindo que o shell n\u00e3o continue a operar em um estado inconsistente.","title":"utils.c"},{"location":"utils/#wrappers-para-gerenciamento-de-processos","text":"As fun\u00e7\u00f5es de gerenciamento de processos em utils.c fornecem uma interface segura para opera\u00e7\u00f5es comuns de processos, como cria\u00e7\u00e3o, execu\u00e7\u00e3o e espera: pid_t Fork(void) : Prop\u00f3sito : Este \u00e9 um wrapper para a chamada de sistema fork() . Ele cria um novo processo filho que \u00e9 uma c\u00f3pia exata do processo pai. Comportamento em Erro : Se fork() falhar (retornar um valor negativo), a fun\u00e7\u00e3o imprime uma mensagem de erro ( \"Fork Failed\" ) usando perror e encerra o programa com exit(EX_OSERR) . Isso garante que o shell n\u00e3o tente operar com um processo filho que n\u00e3o foi criado corretamente. Retorno : Retorna o ID do processo filho ( pid_t ) para o processo pai e 0 para o processo filho, conforme o comportamento padr\u00e3o de fork() . void Execvp(const char *file, char *const argv[]) : Prop\u00f3sito : Este wrapper para execvp() substitui a imagem do processo atual por um novo programa. Ele procura o execut\u00e1vel especificado por file nos diret\u00f3rios listados na vari\u00e1vel de ambiente PATH . Comportamento em Erro : Antes de chamar execvp() , a fun\u00e7\u00e3o verifica se file ou argv s\u00e3o nulos. Se forem, imprime uma mensagem de erro no stderr e encerra com exit(EXIT_FAILURE) . Se execvp() falhar (retornar -1 ), imprime uma mensagem de erro ( \"Failed\" ) usando perror e encerra o programa com exit(EX_UNAVAILABLE) . Isso \u00e9 crucial porque execvp() s\u00f3 retorna em caso de erro; um retorno bem-sucedido significa que o novo programa est\u00e1 em execu\u00e7\u00e3o. Argumentos : file \u00e9 o nome do programa a ser executado, e argv \u00e9 um array de strings que representa os argumentos da linha de comando para o novo programa, onde argv[0] \u00e9 o nome do programa. pid_t Wait(int *status) : Prop\u00f3sito : Este wrapper para wait() suspende a execu\u00e7\u00e3o do processo pai at\u00e9 que um de seus processos filhos termine. Ele \u00e9 usado para coletar o status de sa\u00edda de processos filhos e evitar processos zumbis. Comportamento em Erro : A fun\u00e7\u00e3o primeiro verifica se o ponteiro status \u00e9 nulo. Se for, imprime uma mensagem de erro ( \"Wait: status argument required\" ) e retorna -1 . Se wait() falhar (retornar -1 ), imprime uma mensagem de erro ( \"Wait failed\" ) usando perror . Ap\u00f3s a conclus\u00e3o bem-sucedida de wait() , se o processo filho terminou normalmente ( WIFEXITED(*status) ), o status de sa\u00edda real do filho ( WEXITSTATUS(*status) ) \u00e9 armazenado em *status . Retorno : Retorna o ID do processo filho que terminou ou -1 em caso de erro.","title":"Wrappers para Gerenciamento de Processos"},{"location":"utils/#wrappers-para-gerenciamento-de-memoria","text":"As fun\u00e7\u00f5es de gerenciamento de mem\u00f3ria em utils.c fornecem aloca\u00e7\u00e3o e realoca\u00e7\u00e3o de mem\u00f3ria seguras, com tratamento de erros integrado: void *Malloc(size_t size) : Prop\u00f3sito : Este wrapper para malloc() aloca um bloco de mem\u00f3ria do tamanho especificado. Comportamento em Erro : Se malloc() falhar (retornar NULL ), a fun\u00e7\u00e3o imprime uma mensagem de erro ( \"Malloc Failed\" ) usando perror e encerra o programa com exit(EXIT_FAILURE) . Um caso especial \u00e9 quando size \u00e9 0 , para o qual Malloc retorna NULL sem erro, seguindo o comportamento comum de malloc para aloca\u00e7\u00f5es de tamanho zero. Retorno : Retorna um ponteiro para o bloco de mem\u00f3ria alocado ou NULL se size for 0 . void *Realloc(void *ptr, size_t size) : Prop\u00f3sito : Este wrapper para realloc() redimensiona o bloco de mem\u00f3ria apontado por ptr para o novo size . Comportamento em Erro : Se realloc() falhar (retornar NULL ) e o size n\u00e3o for 0 , a fun\u00e7\u00e3o imprime uma mensagem de erro ( \"Realloc Failed\" ) usando perror e encerra o programa com exit(EXIT_FAILURE) . Se size for 0 , realloc se comporta como free(ptr) , e a fun\u00e7\u00e3o retorna NULL sem erro, o que \u00e9 um comportamento v\u00e1lido. Retorno : Retorna um ponteiro para o bloco de mem\u00f3ria redimensionado ou NULL se a realoca\u00e7\u00e3o falhar ou se size for 0 .","title":"Wrappers para Gerenciamento de Mem\u00f3ria"},{"location":"utils/#wrappers-para-operacoes-de-diretorio","text":"utils.c inclui um wrapper para obter o diret\u00f3rio de trabalho atual: void Getcwd(char *buf, size_t size) : Prop\u00f3sito : Este wrapper para getcwd() copia o caminho absoluto do diret\u00f3rio de trabalho atual para o buffer buf . Comportamento em Erro : Se getcwd() falhar (retornar NULL ), a fun\u00e7\u00e3o imprime uma mensagem de erro ( \"getcwd FAILED\" ) usando perror . Argumentos : buf \u00e9 o buffer onde o caminho ser\u00e1 armazenado, e size \u00e9 o tamanho m\u00e1ximo do buffer.","title":"Wrappers para Opera\u00e7\u00f5es de Diret\u00f3rio"},{"location":"utils/#funcoes-de-interface-do-usuario","text":"Al\u00e9m dos wrappers, utils.c tamb\u00e9m cont\u00e9m fun\u00e7\u00f5es para melhorar a experi\u00eancia do usu\u00e1rio com elementos visuais: void printbanner(void) : Prop\u00f3sito : Imprime um banner ASCII art no console. Este banner \u00e9 exibido no in\u00edcio do shell, fornecendo uma sauda\u00e7\u00e3o visual. Implementa\u00e7\u00e3o : Utiliza a macro p (que envolve printf ) e c\u00f3digos de cores ANSI (definidos em index.h ) para exibir o banner com formata\u00e7\u00e3o colorida. void spinnerLoading() : Prop\u00f3sito : Exibe uma anima\u00e7\u00e3o de \"carregamento\" ou \"desligamento\" no console, simulando um processo em andamento antes de o shell ser encerrado. Implementa\u00e7\u00e3o : A fun\u00e7\u00e3o usa um array de strings ( charging[] ) para representar os diferentes quadros da anima\u00e7\u00e3o de um spinner. Ela itera sobre esses quadros, imprimindo cada um com um atraso ( usleep ) e for\u00e7ando a atualiza\u00e7\u00e3o do console ( fflush(stdout) ). No final da anima\u00e7\u00e3o, imprime uma mensagem de sa\u00edda e encerra o programa com exit(X_OK) (onde X_OK \u00e9 uma constante definida em index.h como EX_OK ). Em resumo, utils.c \u00e9 um componente vital do shell, fornecendo uma camada de abstra\u00e7\u00e3o e tratamento de erros para opera\u00e7\u00f5es de baixo n\u00edvel, o que contribui significativamente para a robustez e a confiabilidade do sistema.","title":"Fun\u00e7\u00f5es de Interface do Usu\u00e1rio"}]}